{"version":3,"sources":["components/Game/GamePanel/Back/index.tsx","components/Game/GamePanel/types.tsx","components/Game/GamePanel/Piece/index.tsx","components/Game/GamePanel/Tool.tsx","components/Game/GamePanel/index.tsx","components/Game/OperatePanel/index.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["Back","props","typeNum","size","className","style","width","height","onClick","PieceType","GameState","index","type","point","black","top","y","left","x","Tool","row","list","data","push","pieceData","pieceType","filter","it","is","undefined","piece","template","i","some","rowArr","every","getArrItem","item","isVictory","GamePanel","initData","state","backData","setBack","this","nextPieceType","map","gameState","draw","black_victory","white_victory","onPush","key","PureComponent","OperatePanel","btnUndoComp","showBtnUndo","onUndo","init","playing_black","playing_white","text","default","white","htmlFor","name","id","value","defaultChecked","onPriority","disabled","Game","switchPieceType","setState","triumphType","judgeTheWinningSide","length","undo","arr","pop","setGameState","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62f54311.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { IBack } from \"../types\";\r\n\r\nexport default function Back(props: IBack) {\r\n  const { typeNum, size } = props;\r\n  return (\r\n    <span\r\n      className={`back back-${typeNum}`}\r\n      style={{ width: size, height: size }}\r\n      onClick={() => {\r\n        props.onClick!();\r\n      }}\r\n    ></span>\r\n  );\r\n}\r\n","export interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\nexport enum PieceType {\r\n  black,\r\n  white\r\n}\r\nexport interface IPiece {\r\n  size: number;\r\n  type: PieceType;\r\n  point: Point;\r\n}\r\n\r\nexport interface IBack {\r\n  onClick?: () => void;\r\n  size: number;\r\n  typeNum: number;\r\n  point: Point;\r\n}\r\n\r\nexport enum GameState {\r\n  init = \"准备就绪\",\r\n  playing_black = \"黑方落子\",\r\n  playing_white = \"白方落子\",\r\n  black_victory = \"黑方胜利\",\r\n  white_victory = \"白方胜利\",\r\n  draw = \"平局\"\r\n}\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { IPiece, PieceType } from \"../types\";\r\n\r\nexport default function index(props: IPiece) {\r\n  const { size, type, point } = props;\r\n  return (\r\n    <span\r\n      className={`piece piece-${type === PieceType.black ? \"black\" : \"white\"}`}\r\n      style={{\r\n        top: point.y * size,\r\n        left: point.x * size,\r\n        width: size,\r\n        height: size\r\n      }}\r\n    ></span>\r\n  );\r\n}\r\n","import { IBack, Point, IPiece, PieceType } from \"./types\";\r\n\r\nexport class Tool {\r\n  /**\r\n   * 生成棋盘背景数组\r\n   * @param {number} size\r\n   * @param {number} row\r\n   * @param {number} list\r\n   * @returns {IBack[]}\r\n   */\r\n  static setBack(size: number, row: number, list: number): IBack[] {\r\n    const data: IBack[] = [];\r\n    for (let y = 0; y < row; y++) {\r\n      for (let x = 0; x < list; x++) {\r\n        let typeNum: number = 0,\r\n          point: Point = { x, y };\r\n        if (y === 0) {\r\n          if (x === 0) {\r\n            typeNum = 1;\r\n          } else if (x === list - 1) {\r\n            typeNum = 3;\r\n          } else {\r\n            typeNum = 2;\r\n          }\r\n        } else if (y === row - 1) {\r\n          if (x === 0) {\r\n            typeNum = 7;\r\n          } else if (x === list - 1) {\r\n            typeNum = 9;\r\n          } else {\r\n            typeNum = 8;\r\n          }\r\n        } else {\r\n          if (x === 0) {\r\n            typeNum = 4;\r\n          } else if (x === list - 1) {\r\n            typeNum = 6;\r\n          } else {\r\n            typeNum = 5;\r\n          }\r\n        }\r\n        data.push({ typeNum, size, point });\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * 通过坐标获取 pieceData 中的 item\r\n   * @private\r\n   * @static\r\n   * @param {IPiece[]} pieceData\r\n   * @param {Point} point 坐标\r\n   * @param {PieceType} [pieceType] 更严格的筛选，\r\n   * @returns {(IPiece | null)}\r\n   * @memberof Tool\r\n   */\r\n  private static getArrItem(\r\n    pieceData: IPiece[],\r\n    point: Point,\r\n    pieceType?: PieceType\r\n  ): IPiece | null {\r\n    const item = pieceData.filter(it => {\r\n      const {\r\n        point: { x, y },\r\n        type\r\n      } = it;\r\n      let is = false;\r\n      if (point.x === x && point.y === y) {\r\n        is = true;\r\n        if (pieceType !== undefined && type !== pieceType) is = false;\r\n      }\r\n      return is;\r\n    });\r\n    return item[0] || null;\r\n  }\r\n\r\n  /**\r\n   * 通过模板比较，判断黑方或白方胜利\r\n   * @static\r\n   * @param {IPiece[]} pieceData\r\n   * @param {IPiece} piece\r\n   * @returns 返回 piece | null\r\n   * @memberof Tool\r\n   */\r\n  static isVictory(pieceData: IPiece[], piece: IPiece) {\r\n    const template: any[] = [[], [], [], []],\r\n      { size, type, point } = piece;\r\n    for (let i = -2; i < 3; i++) {\r\n      template[0].push({ size, type, point: { x: point.x + i, y: point.y } });\r\n      template[1].push({ size, type, point: { x: point.x, y: point.y + i } });\r\n      template[2].push({\r\n        size,\r\n        type,\r\n        point: { x: point.x + i, y: point.y + i }\r\n      });\r\n      template[3].push({\r\n        size,\r\n        type,\r\n        point: { x: point.x - i, y: point.y + i }\r\n      });\r\n    }\r\n    const is = template.some(rowArr => {\r\n      return rowArr.every((it: IPiece) => {\r\n        return this.getArrItem(pieceData, it.point, it.type) !== null;\r\n      });\r\n    });\r\n    return is ? piece : null;\r\n  }\r\n  static judgeTheWinningSide(pieceData: IPiece[]): null | PieceType {\r\n    const item =\r\n      pieceData.filter(it => {\r\n        return Tool.isVictory(pieceData, it);\r\n      })[0] || null;\r\n    return item && item.type;\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./index.scss\";\r\nimport Back from \"./Back\";\r\nimport Piece from \"./Piece\";\r\nimport { PieceType, IBack, IPiece, GameState } from \"./types\";\r\nimport { Tool } from \"./Tool\";\r\n\r\ninterface IProps {\r\n  initData: { size: number; row: number; list: number };\r\n  nextPieceType: PieceType;\r\n  gameState: GameState;\r\n  setGameState: (state: GameState) => void;\r\n  pieceData: IPiece[]; // 历史数据\r\n  onPush: (piece: IPiece) => void;\r\n}\r\n\r\ninterface IState {\r\n  backData: IBack[];\r\n}\r\n\r\nexport default class GamePanel extends PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    const { initData } = this.props;\r\n    this.state = {\r\n      backData: Tool.setBack(initData.size, initData.row, initData.list)\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { backData } = this.state;\r\n    const { nextPieceType } = this.props;\r\n    const { size, list, row } = this.props.initData,\r\n      width = list * size,\r\n      height = row * size;\r\n    // console.log(JSON.stringify(pieceData));\r\n    return (\r\n      <div className=\"game-panel\">\r\n        <div className=\"panel-back\" style={{ width, height }}>\r\n          {backData.map((it, i) => {\r\n            return (\r\n              <Back\r\n                {...it}\r\n                onClick={() => {\r\n                  if (\r\n                    this.props.gameState === GameState.draw ||\r\n                    this.props.gameState === GameState.black_victory ||\r\n                    this.props.gameState === GameState.white_victory\r\n                  ) {\r\n                    // 游戏结束 不能继续点击\r\n                    return;\r\n                  }\r\n                  this.props.onPush({\r\n                    point: it.point,\r\n                    size,\r\n                    type: nextPieceType\r\n                  });\r\n                }}\r\n                key={i}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {this.props.pieceData.map((it, i) => (\r\n            <Piece {...it} key={i} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport { GameState, PieceType } from \"../GamePanel/types\";\r\n\r\ninterface IProps {\r\n  gameState: GameState;\r\n  onClick: (state: GameState) => void;\r\n  onPriority: (pieceType: PieceType) => void;\r\n  nextPieceType: PieceType;\r\n  onUndo: () => void;\r\n  showBtnUndo: boolean;\r\n}\r\nexport default function OperatePanel(props: IProps) {\r\n  let btnUndoComp = <></>;\r\n  if (props.showBtnUndo) {\r\n    btnUndoComp = <button onClick={props.onUndo}>悔棋</button>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"operate-panel\">\r\n      <p className=\"state\">\r\n        游戏状态: <span>{props.gameState}</span>\r\n      </p>\r\n      <button\r\n        onClick={() => {\r\n          if (props.gameState === GameState.init) {\r\n            const state =\r\n              props.nextPieceType === PieceType.black\r\n                ? GameState.playing_black\r\n                : GameState.playing_white;\r\n            props.onClick(state);\r\n          } else {\r\n            props.onClick(GameState.init);\r\n          }\r\n        }}\r\n      >\r\n        {props.gameState === GameState.init ? \"开始\" : \"重玩\"}\r\n      </button>\r\n      {btnUndoComp}\r\n      <p>优先出棋方:</p>\r\n      <div className=\"radio-flex\">\r\n        {[\r\n          { text: \"黑方优先\", PieceType: PieceType.black, default: true },\r\n          { text: \"白方优先\", PieceType: PieceType.white }\r\n        ].map((it, i) => {\r\n          return (\r\n            <label htmlFor={`radio-sv2-${i}`} key={i}>\r\n              {it.text}\r\n              <input\r\n                type=\"radio\"\r\n                name=\"state\"\r\n                id={`radio-sv2-${i}`}\r\n                value=\"black\"\r\n                defaultChecked={it.default}\r\n                onClick={() => props.onPriority(it.PieceType)}\r\n                disabled={props.gameState !== GameState.init}\r\n              />\r\n            </label>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport GamePanel from \"./GamePanel\";\r\nimport OperatePanel from \"./OperatePanel\";\r\nimport { GameState, PieceType, IPiece } from \"./GamePanel/types\";\r\nimport { Tool } from \"./GamePanel/Tool\";\r\n\r\ninterface GameConfig {\r\n  size: number;\r\n  row: number;\r\n  list: number;\r\n}\r\nexport default class Game extends PureComponent<GameConfig> {\r\n  state = {\r\n    nextPieceType: PieceType.black,\r\n    gameState: GameState.init,\r\n    initData: this.props,\r\n    pieceData: []\r\n  };\r\n  /**\r\n   * 切换棋子\r\n   * @param {PieceType} pieceType\r\n   * @returns\r\n   */\r\n  private switchPieceType = (pieceType: PieceType) => {\r\n    return pieceType === PieceType.black ? PieceType.white : PieceType.black;\r\n  };\r\n  /**\r\n   * 添加棋子跟完整的判断胜负\r\n   * @param {IPiece} piece\r\n   */\r\n  onPush = (piece: IPiece) => {\r\n    const nextPieceType = this.switchPieceType(piece.type);\r\n    const gameState =\r\n      nextPieceType === PieceType.black\r\n        ? GameState.playing_black\r\n        : GameState.playing_white;\r\n    this.setState(\r\n      {\r\n        pieceData: [...this.state.pieceData, piece],\r\n        nextPieceType,\r\n        gameState\r\n      },\r\n      () => {\r\n        const { initData, pieceData } = this.state;\r\n        // ----------------------- 算法，判断哪方胜利\r\n        const triumphType = Tool.judgeTheWinningSide(pieceData);\r\n        if (triumphType === PieceType.black) {\r\n          // 黑方胜利\r\n          this.setState({ gameState: GameState.black_victory });\r\n        } else if (triumphType === PieceType.white) {\r\n          // 白方胜利\r\n          this.setState({ gameState: GameState.white_victory });\r\n        }\r\n        // ----------------------- 棋盘下满后还没有胜负，表示平局\r\n        if (pieceData.length === initData.row * initData.list) {\r\n          this.setState({ gameState: GameState.draw });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  /**\r\n   * 悔棋\r\n   * @memberof Game\r\n   */\r\n  undo = () => {\r\n    if (this.state.pieceData.length < 2) return;\r\n    let arr: IPiece[] = [...this.state.pieceData],\r\n      item = arr.pop();\r\n    if (!item) return;\r\n    // 悔棋\r\n    const gameState =\r\n      item.type === PieceType.black\r\n        ? GameState.playing_black\r\n        : GameState.playing_white;\r\n    this.setState({\r\n      pieceData: arr,\r\n      nextPieceType: item.type,\r\n      gameState\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { gameState, nextPieceType } = this.state;\r\n    return (\r\n      <div className=\"Game wrap-center\">\r\n        <GamePanel\r\n          {...this.state}\r\n          setGameState={state => {\r\n            this.setState({ gameState: state });\r\n          }}\r\n          onPush={this.onPush}\r\n        />\r\n        <OperatePanel\r\n          gameState={gameState}\r\n          nextPieceType={nextPieceType}\r\n          showBtnUndo={\r\n            (this.state.pieceData.length > 1 &&\r\n              this.state.gameState === GameState.playing_black) ||\r\n            (this.state.pieceData.length > 1 &&\r\n              this.state.gameState === GameState.playing_white)\r\n          }\r\n          onClick={state => {\r\n            if (state === GameState.init) {\r\n              this.setState({ pieceData: [] });\r\n            }\r\n            this.setState({ gameState: state });\r\n          }}\r\n          onPriority={(nextPieceType: PieceType) => {\r\n            this.setState({ nextPieceType });\r\n          }}\r\n          onUndo={this.undo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\nimport \"./App.scss\";\nimport Game from \"./components/Game\";\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game {...{ size: 30, row: 20, list: 20 }} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}